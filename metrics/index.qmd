---
title: "Repository Metrics"
page-layout: full
format:
  html:
    toc: false
---

<style>
.metrics-wrap { max-width:1100px; margin:0 auto; padding:0 1rem 3rem; }
.metrics-title { margin-bottom:0.5rem; }
.metrics-meta { opacity:.75; font-size:.9rem; margin:.5rem 0 1rem; }
.metrics-error { color:#7f1d1d; }
.metrics-grid { display:grid; gap:16px; grid-template-columns:repeat(auto-fill,minmax(220px,1fr)); }
.metric-card { border:1px solid #e5e7eb; border-radius:14px; padding:18px; box-shadow:0 1px 2px rgba(0,0,0,.04); }
.metric-value { font-weight:700; font-size:1.6rem; line-height:1.1; }
.metric-label { color:#64748b; margin-top:6px; font-size:.95rem; }
</style>


<div id="metrics-root" class="metrics-wrap">
  <h1 class="metrics-title">Repository Metrics</h1>
</div>

<script>
(async () => {
  const JSON_URL = "https://data.metrics.bp.nbis.se/metrics.json";
  const root = document.getElementById("metrics-root");

  const METRICS = [
    ["number_of_wsis","Whole-slide images"],["number_of_images","Images"],
    ["number_of_datasets","Datasets"],["cases_uploaded","Cases uploaded"],
    ["biological_beings","Biological beings"],["specimens_uploaded","Specimens uploaded"],
    ["blocks_uploaded","Blocks uploaded"],["observations_uploaded","Observations uploaded"],
    ["number_of_stainings","Stainings"],["annotations_uploaded","Annotations uploaded"]
  ];
  const fmt = n => new Intl.NumberFormat(navigator.language||"en-US").format(n);

  const header = (genAt, err) => {
    const msg = err
      ? `<span class="metrics-error">${err}</span>`
      : `Last updated: ${genAt ? new Date(genAt).toLocaleString() : "—"}`;
    return `<div class="metrics-meta">${msg}</div>`;
  };

  const cards = (metrics) => {
    const by = new Map((metrics||[]).map(m => [m.name, Number(m.value)]));
    const items = METRICS.map(([k,label]) => {
      const v = by.has(k) && Number.isFinite(by.get(k)) ? fmt(by.get(k)) : "—";
      return `
        <div class="metric-card">
          <div class="metric-value">${v}</div>
          <div class="metric-label">${label}</div>
        </div>`;
    }).join("");
    return `<div class="metrics-grid">${items}</div>`;
  };

  try {
    const r = await fetch(JSON_URL);
    if (!r.ok) throw new Error(`HTTP ${r.status}`);
    const raw = await r.json();
    const g = raw?.globalMetrics || raw || {};
    root.innerHTML = header(g.generated_at, null) + cards(g.metrics);
  } catch (e) {
    root.innerHTML = header(null, `Unable to load metrics (${e.message||e}).`) + cards(null);
  }
})();
</script>
